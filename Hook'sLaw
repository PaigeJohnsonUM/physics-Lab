import numpy as np
import matplotlib.pyplot as plt
import math

#define plotting and linear least squares fitting as functions

#goodness of fit parameter
def LLSFD2(x,y,dy,b,m):
    N = sum(((y-b-m*x)/dy)**2)
    return N
                      
def Delta(x, dy):
    D = (sum(1/dy**2))*(sum(x**2/dy**2))-(sum(x/dy**2))**2
    return D


def plotfit(x,y,dy,title,xlabel,ylabel,slopeunit):
    b,m=np.polynomial.polynomial.polyfit(x,y,1,w=dy)
    fit = b+m*x
    N = LLSFD2(x,y,dy,b,m)    
    D=Delta(x, dy)
    dm = math.sqrt(1/D*sum(1/dy**2)) #error in slope
    db = math.sqrt(1/D*sum(x**2/dy**2)) #error in intercept
    plt.scatter(x, y, color='red', marker='o')
    #Plot least squares fit line
    plt.plot(x, fit, color='green', linestyle='--')

    #Plot y error bars - do not need to modify
    plt.errorbar(x, y, yerr=dy, xerr=None, fmt="none")

    #Write x and y axes labels, title.  Modify these!
    plt.xlabel(xlabel) #x-axis label
    plt.ylabel(ylabel) #y-axis label
    plt.title(title) #plot title
    plt.show()
    
    print (f"Slope = {m:.2f} {slopeunit}")
    print (f"Error in slope = {dm:.2f} {slopeunit}")
    print (f"Goodness of fit = {N:.2f}")

#Slopes for Part 1
x=np.array([0.345,0.53,0.61,0.685,0.82,0.17])
y=np.array([0.981,1.569,1.815,2.011,2.453,0.490])
dy=np.array([0.00981,0.00981,0.00981,0.00981,0.00981,0.00981])
plotfit(x,y,dy,"Spring Constant as slope of Force over Displacement","Displacement","Restoring Force","N/m")
x=np.array([0.085,0.135,0.155,0.17,0.205,0.045])
plotfit(x,y,dy,"Spring Constant as slope of Force over Displacement","Displacement(m)","Restoring Force(N)","N/m")

#part 2
def rule_4(Q,m,dA,A,n,dB,B):
  multi= float(np.sqrt(((m*(dA/A))**2)+((n*(dB/B))**2)))
  dQ= float(Q*multi)
  return dQ

def avg(x):
  mean= np.average(x)
  return mean

def Plugs(m,T):
  peanut=(4*((math.pi)**2))
  near=(m*peanut)
  slve=(near/(T**2))
  return slve

m=np.array([0.300,0.250,0.215,0.195,0.160,0.150])
T=np.array([0.995,0.909,0.846,0.802,0.728,0.704])
dT=np.array([0.0786,0.0717,0.0668,0.0634,0.0474,0.556])
k=np.array(Plugs(m,T))
print(avg(k))
print(rule_4(avg(k),-2,0.0786,0.995,1,0.001,0.300))

l=np.array([0.150,0.115,0.100,0.90,0.70,0.50])
V=np.array([1.267,1.233,1.148,1.086,0.96,0.809])
dV=np.array([0.10004,0.0974,0.906,0.0858,0.0758,0.0638])
q=np.array(Plugs(l,V))
print(avg(q)/10)
print(rule_4(avg(q),-2,0.10004,1.267,1,0.001,0.150))
