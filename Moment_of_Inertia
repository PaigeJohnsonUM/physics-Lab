import numpy as np



def rule_1(c,dA):
  dQ=abs(c)*dA
  return dQ

def rule_2(c,m,A,dA):
  mults= abs(c*m*(A**(m-1)))
  dQ=dA*mults
  return dQ

def rule_3(dA,dB):
  dQ= np.sqrt(dA**2 + dB**2)
  return dQ

def rule_4(Q,m,dA,A,n,dB,B):
  multi= float(np.sqrt(((m*(dA/A))**2)+((n*(dB/B))**2)))
  dQ= float(Q*multi)
  return dQ

def avg(x):
  mean= np.average(x)
  return mean

def error_avg(x):
  s= np.std(x)
  lol=len(x)
  err= (s/(np.sqrt(lol)))
  return err

def tork(r,m,a):
  lal= (9.81-a)
  t= r*m*lal
  return t
print(tork(0.0152, 0.025,0.002172), tork(0.0152,0.045,0.006427), tork(0.0152,0.065,0.011045), tork(0.0152, 0.085, 0.0159), tork(0.0152, 0.105, 0.02075))

def err_tork(r,m,a,dr,dm,da,t):
  multi= float(np.sqrt(((dr/r)**2)+((dm/m)**2)+((da/(9.81-a))**2)))
  dt= t*multi
  return dt

#Plotting code to use the whole year!

#Jaylene Naylor

#September 2015, modified Sept 2017, August 2018, Aug 2020(for Python 3.8)

#-------------------------------------------#

%matplotlib inline



#Import packages and libraries needed and give them shortcut names



import numpy as np

import matplotlib.pyplot as plt



#-------------------------------------------#

#Data Section - Create Arrays for data. Perform necessary calculations

#CHANGE THE VARIABLE NAMES and numbers to match your data

Angular_acceleration = np.array([.143,.437,.727,1.046,1.368]) #what are units? feet

Torque = np.array([0.003727,0.006706, 0.009681,0.01265,0.01562]) #what are units? seconds squared





#--------------------------------------------#

#Create arrays for uncertainties

#CHANGE THE VARIABLE NAME and numbers to match your data 

err_Torque = np.array([0.00005125,0.0000895,0.000128,0.000206,0.000206])





#--------------------------------------------#

#Re-assign variables as x, y, dy so that the following code may remain generic



x = Angular_acceleration   #this should be the array you want to plot on the x axis

y = Torque

dy = err_Torque #this should be your error in y array



#----------------------------------------------#

#Don't need to change anything in this section!

 

#Find the intercept and slope, b and m, from Python's polynomial fitting function

b,m=np.polynomial.polynomial.polyfit(x,y,1,w=dy)



#Write the equation for the best fit line based on the slope and intercept

fit = b+m*x



#Calculate the error in slope and intercept 

#def Delta(x, dy) is a function, and we will learn how to write our own at a later date. They are very useful!

def Delta(x, dy):

    D = (sum(1/dy**2))*(sum(x**2/dy**2))-(sum(x/dy**2))**2

    return D

 

D=Delta(x, dy)

 

dm = np.sqrt(1/D*sum(1/dy**2)) #error in slope

db = np.sqrt(1/D*sum(x**2/dy**2)) #error in intercept



#Calculate the "goodness of fit" from the linear least squares fitting document

def LLSFD2(x,y,dy):

    N = sum(((y-b-m*x)/dy)**2)

    return N

                      

N = LLSFD2(x,y,dy)



#-----------------------------------------------------------------------#

#Plot data on graph. Plot error bars and place values for slope, error in slope

#and goodness of fit on the plot using "annotate"



plt.figure(figsize=(15,10))

 

plt.plot(x, fit, color='green', linestyle='--')

plt.scatter(x, y, color='blue', marker='o')

 

 

#create labels  YOU NEED TO CHANGE THESE!!!

plt.xlabel('2h(m)')

plt.ylabel('delta t^2(s^2)')

plt.title('Graph to find 1 over gravity')

 

plt.errorbar(x, y, yerr=dy, xerr=None, fmt="none") #don't need to plot x error bars

 

plt.annotate('Slope (units_changeme) = {value:.{digits}E}'.format(value=m, digits=2),

             (0.05, 0.9), xycoords='axes fraction')

 

plt.annotate('Error in Slope (units_changeme) = {value:.{digits}E}'.format(value=dm, digits=1),

             (0.05, 0.85), xycoords='axes fraction')

 

plt.annotate('Goodness of fit = {value:.{digits}E}'.format(value=N, digits=2),

             (0.05, 0.80), xycoords='axes fraction')
